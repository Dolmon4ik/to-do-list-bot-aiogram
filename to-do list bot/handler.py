from aiogram import Bot, Dispatcher, types, html, F, Router
from aiogram.filters import CommandStart, Command
import datetime
import keyboard as kb
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from todolist.keyboard import create_reply_buttons, get_notes_list
from todolist import database as db
router = Router()


class TaskStates(StatesGroup):
    choosing_task = State()

class Taskadd(StatesGroup):
    task_add = State()



class commands:      # –ö–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥ (/start)
    @router.message(CommandStart())         #—Ä–æ—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã / –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def start(message: types.Message):      #–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥

        try:                # –ú–µ—Ç–æ–¥ try. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ª—è–∂–µ—Ç, –∞ –≤—ã–ø–æ–ª–Ω–∏—Ç except
            await db.add_id(message.from_user.id)
            await message.answer('–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –±–æ—Ç - –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫. –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å'
                                '–∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏, –æ—Ç–º–µ—á–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å' #–ü–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç–∏—Ç –∏ –≤—ã–≤–µ–¥–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É main –∏–∑ kb
                                '–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏!', reply_markup=kb.main)


        except Exception as error:              # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, —Ç–æ –∑–∞–∫–∏–¥—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é e
            await message.answer(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Dolmon4ik \n–û—à–∏–±–∫–∞: {str(error)}"') # –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É

class buttons:      #–ö–ª–∞—Å—Å —Ñ—É–Ω–∫—Ü–∏–π, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –¥–∞–Ω–Ω—ã–µ —Å –∫–Ω–æ–ø–æ–∫

    @router.message(F.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏üìã")        #–†–æ—É—Ç–µ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–æ–º. –§—É–Ω–∫—Ü–∏—è –Ω–∏–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ "–ú–æ–∏ –∑–∞–¥–∞—á–∏üìã"
    async def my_notes(message: types.Message):         #–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        try:
            notes_list = get_notes_list(message.from_user.id)
            keyboard = await create_reply_buttons(notes_list)     #–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è keyboard, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ keyboard.create_reply_buttons
            await message.answer('–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏', reply_markup=keyboard)  #–û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏" –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Dolmon4ik \n–û—à–∏–±–∫–∞: {str(error)}"')

    @router.message(F.text == "–ù–∞–∑–∞–¥‚¨ÖÔ∏è")
    async def back(message: types.Message):

        try:
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)

        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Dolmon4ik \n–û—à–∏–±–∫–∞: {str(error)}"')

    @router.message(F.text == '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É‚úÖ')
    async def remove(message: types.Message, state: FSMContext):    ######
        try:
            notes_list = get_notes_list(message.from_user.id)
            keyboard = await create_reply_buttons(notes_list)
            await message.answer('–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å / —É–¥–∞–ª–∏—Ç—å', reply_markup=keyboard)
            await state.set_state(TaskStates.choosing_task) #–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å choosing_task
        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Dolmon4ik \n–û—à–∏–±–∫–∞: {str(error)}"')

    @router.message(TaskStates.choosing_task)       #–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å == choosing_task
    async def removing(message: types.Message, state: FSMContext):
        try:
            notes_list = get_notes_list(message.from_user.id)

            if message.text in notes_list:                                              #–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è == –æ–±—ä–µ–∫—Ç—É –≤ –ª–∏—Å—Ç–µ, —Ç–æ
                notes_list.remove(message.text)                                         #—É–¥–∞–ª—è–µ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏–∑ –ª–∏—Å—Ç–∞ –∏
                await db.remove_note(str(message.text), message.from_user.id)
                await message.answer('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞‚úÖ', reply_markup=kb.main)   #–æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞) –∏
                await  state.clear()                                                    #–æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å

            elif message.text ==  '–ù–∞–∑–∞–¥‚¨ÖÔ∏è':                                            #–ª–∏–±–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥‚¨ÖÔ∏è, —Ç–æ
                await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)          #–ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏
                await state.clear()                                                      #–æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å

            else:                                                                        #–ª–∏–±–æ
                await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.')           #–ü—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç
        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Dolmon4ik \n–û—à–∏–±–∫–∞: {str(error)}"')

    @router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—Éüìå')
    async def addtask(message: types.Message, state: FSMContext):
        try:
            await message.answer('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')
            await state.set_state(Taskadd.task_add)
        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Dolmon4ik \n–û—à–∏–±–∫–∞: {str(error)}"')

    @router.message(Taskadd.task_add)
    async def add(message: types.Message, state: FSMContext):
        try:
            notes_list = get_notes_list(message.from_user.id)
            if message.text not in notes_list:
                await db.add_note(str(message.text), message.from_user.id)
                await message.answer('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
                await state.clear()
            else:
                await message.answer('–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –µ—Å—Ç—å!')
        except Exception as error:
            await message.answer(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Dolmon4ik \n–û—à–∏–±–∫–∞: {str(error)}"')





